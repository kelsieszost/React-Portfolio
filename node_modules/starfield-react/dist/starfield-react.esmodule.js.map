{"version":3,"file":"starfield-react.esmodule.js","sources":["../src/field/StarState.ts","../src/hooks/useStarField.ts","../src/field/drawStarField.ts","../src/components/StarField.tsx","../src/hooks/useWindowSize.ts","../src/components/WindowSizeStarField.tsx","../src/color/randomColor.ts"],"sourcesContent":["export interface StarFieldState {\n  width: number\n  height: number\n  x: number\n  y: number\n  z: number\n  stars: StarState[]\n}\n\nexport interface StarState {\n  x: number\n  y: number\n  z: number\n  stepX: number\n  stepY: number\n}\n\nexport type ColorFunction = () => string\n\nexport function createStarsState(options: { width: number, height: number, count: number }): StarFieldState {\n  let width = options.width\n  let height = options.height\n\n  let x = Math.round(width / 2)\n  let y = Math.round(height / 2)\n  let z = (width + height) / 2\n\n  return {\n    stars: createStars(x, y, z, width, height, options.count),\n    width,\n    height,\n    x,\n    y,\n    z,\n  }\n}\n\nexport function createStars(\n  x: number,\n  y: number,\n  z: number,\n  width: number,\n  height: number,\n  count: number,\n) {\n  let starPool: StarState[] = []\n  for (let i = 0; i < count; i++) {\n    starPool.push({\n      x: Math.random() * width * 2 - x * 2,\n      y: Math.random() * height * 2 - y * 2,\n      z: Math.round(Math.random() * z),\n      stepX: 0,\n      stepY: 0,\n    })\n  }\n  return starPool\n}\n","import { MutableRefObject, RefObject, useEffect } from 'react'\n\nimport { ColorFunction, createStarsState, StarFieldState } from '../field/StarState'\nimport { drawStarField } from '../field/drawStarField'\n\nexport interface Options {\n  count: number\n  speed: number\n  starRatio: number\n  starSize: number\n  width: number\n  height: number\n  starStyle: ColorFunction | string\n  clear: boolean\n  starShape: 'butt' | 'round' | 'square'\n  bgStyle: string\n  fps: number\n  noBackground: boolean\n}\n\nexport function useStarField(\n  canvasRef: RefObject<HTMLCanvasElement>,\n  options: Options,\n  stateReference?: MutableRefObject<StarFieldState>,\n) {\n  const initialState = stateReference?.current || createStarsState({\n    count: options.count,\n    height: options.height,\n    width: options.width,\n  })\n\n  if (options.count !== initialState.stars.length) {\n    if (initialState.stars.length < options.count) {\n      const { stars } = createStarsState({\n        count: options.count - initialState.stars.length,\n        height: options.height,\n        width: options.width,\n      })\n      initialState.stars = [...initialState.stars, ...stars]\n    } else {\n      initialState.stars.splice(0, initialState.stars.length - options.count)\n    }\n  }\n\n  if (options.width !== initialState.width || options.height !== initialState.height) {\n    const { stars } = createStarsState({\n      count: options.count,\n      height: options.height,\n      width: options.width,\n    })\n    initialState.stars = stars\n    initialState.width = options.width\n    initialState.height = options.height\n    initialState.x = Math.round(options.width / 2)\n    initialState.y = Math.round(options.height / 2)\n    initialState.z = (options.width + options.height) / 2\n  }\n\n  useEffect(() => {\n    if (!canvasRef.current) return\n    const context = canvasRef.current.getContext('2d')\n    if (!context) return\n\n    const starLineWidthRatio = 1 / initialState.z\n    const { speed, starRatio, starSize } = options\n\n    if (typeof options.starStyle === 'string') {\n      context.strokeStyle = options.starStyle\n    }\n\n    context.lineCap = options.starShape\n\n    const fpsInterval = 1000 / options.fps\n    let animationFrameId: number\n    let then = Date.now()\n    let now, elapsed\n\n    animationFrameId = requestAnimationFrame(animateFrame)\n\n    function animateFrame() {\n      if (!context) return\n\n      animationFrameId = requestAnimationFrame(animateFrame)\n\n      now = Date.now()\n      elapsed = now - then\n      if (elapsed < fpsInterval) return\n      then = now - (elapsed % fpsInterval)\n\n      drawStarField({\n        context,\n        speed,\n        starRatio,\n        starSize,\n        starLineWidthRatio,\n        strokeStyle: options.starStyle,\n        bgStyle: options.bgStyle,\n        noBackground: options.noBackground,\n        clear: options.clear,\n        ...initialState,\n      })\n    }\n\n    return () => cancelAnimationFrame(animationFrameId)\n  }, [options])\n}\n","import { ColorFunction, StarState } from './StarState'\n\nexport type DrawState = {\n  context: CanvasRenderingContext2D\n  stars: StarState[]\n  width: number\n  height: number\n  z: number\n  x: number\n  y: number\n  starLineWidthRatio: number\n  speed: number\n  starRatio: number\n  starSize: number\n  strokeStyle: ColorFunction | string\n  bgStyle: string\n  clear: boolean\n  noBackground: boolean\n}\n\nexport function drawStarField({\n  context,\n  stars,\n  width,\n  height,\n  z,\n  x,\n  y,\n  starLineWidthRatio,\n  speed,\n  starRatio,\n  starSize,\n  strokeStyle,\n  bgStyle,\n  clear,\n  noBackground,\n}: DrawState) {\n  if (clear) {\n    context.clearRect(0, 0, width, height)\n\n    if (!noBackground) {\n      context.fillStyle = bgStyle\n      context.fillRect(0, 0, width, height)\n    }\n  }\n\n  let drawStarStep = false\n\n  for (let i = 0; i < stars.length; i++) {\n    if (typeof strokeStyle === 'function') {\n      context.strokeStyle = strokeStyle()\n    }\n\n    let star = stars[i]\n    let currentX = star.stepX\n    let currentY = star.stepY\n\n    drawStarStep = true\n    star.z -= speed\n\n    if (star.z > z) {\n      star.z -= z\n      drawStarStep = false\n    }\n\n    if (star.z < 0) {\n      star.z += z\n      drawStarStep = false\n    }\n\n    star.stepX = x + (star.x / star.z) * starRatio\n    star.stepY = y + (star.y / star.z) * starRatio\n\n    drawStarStep = drawStarStep &&\n      currentX > 0 && currentX < width &&\n      currentY > 0 && currentY < height\n\n    if (drawStarStep) {\n      context.beginPath()\n      context.lineWidth = (1 - starLineWidthRatio * star.z) * starSize\n      context.moveTo(currentX, currentY)\n      context.lineTo(star.stepX, star.stepY)\n      context.stroke()\n      context.closePath()\n    }\n  }\n}\n","import React, { FC, useRef, CSSProperties } from 'react'\n\nimport { useStarField } from '../hooks/useStarField'\nimport { createStarsState, StarFieldState } from '../field/StarState'\n\nexport type StarFieldProps = {\n  // Width is passed through to the html canvas element\n  width?: number\n  // Height is passed through to the html canvas element\n  height?: number\n  // To total number of stars created for the animation\n  count?: number\n  // The speed of travel through the Star Field\n  speed?: number\n  // The frames per second of the animation draw calls\n  fps?: number\n  // Clear the canvas on each draw call,\n  // when false each draw call remains on the canvas and overlapped by the next\n  clear?: boolean\n  // The ratio used to determine the size of the entire Star Field\n  starRatio?: number\n  // The size of the stroke used for drawing each star\n  starSize?: number\n  // The canvas [strokeStyle](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n  // used for drawing each star\n  // Also valid, a function that returns the strokeStyle from being invoked,\n  // each draw call for special effects like random color\n  starStyle?: ColorFunction | string\n  // The canvas [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n  // used for drawing each star\n  starShape?: 'butt' | 'round' | 'square'\n  // The canvas [fillStyle](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n  // used for drawing the background of the canvas\n  bgStyle?: string\n  // A flag to set no background of fillStyle of the canvas\n  noBackground?: boolean\n  className?: string\n  style?: CSSProperties\n}\n\ntype ColorFunction = () => string\n\nexport const StarField: FC<StarFieldProps> = ({\n  width = 300,\n  height = 300,\n  starStyle = '#fff',\n  bgStyle = '#000',\n  count = 3000,\n  speed = 3,\n  starRatio = 356,\n  starSize = 1.4,\n  starShape = 'round',\n  clear = true,\n  noBackground = false,\n  fps = 10,\n  ...restProps\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const stateRef = useRef<StarFieldState>(createStarsState({\n    count,\n    height,\n    width,\n  }))\n\n  useStarField(canvasRef, {\n    width,\n    height,\n    starStyle,\n    bgStyle,\n    count,\n    fps,\n    speed,\n    starRatio,\n    starShape,\n    starSize,\n    clear,\n    noBackground,\n  }, stateRef)\n\n  return <canvas\n    ref={canvasRef}\n    {...{ width, height }}\n    {...restProps}\n  />\n}\n","import { useEffect, useState } from 'react'\n\nexport interface WindowSize {\n  innerHeight: number\n  innerWidth: number\n  outerHeight: number\n  outerWidth: number\n}\n\nexport function useWindowSize(): WindowSize {\n  let [windowSize, setWindowSize] = useState(getWindowSize())\n\n  function handleResize() {\n    setWindowSize(getWindowSize())\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  return windowSize\n}\n\nfunction getWindowSize(): WindowSize {\n  return {\n    innerHeight: window.innerHeight,\n    innerWidth: window.innerWidth,\n    outerHeight: window.outerHeight,\n    outerWidth: window.outerWidth,\n  }\n}\n","import React, { CSSProperties, FC } from 'react'\n\nimport { useWindowSize } from '../hooks/useWindowSize'\nimport { StarField, StarFieldProps } from './StarField'\n\nconst fixedPositionStyle: CSSProperties = {\n  position: 'fixed',\n  zIndex: -1,\n}\n\nexport const WindowSizeStarField: FC<StarFieldProps> = ({ style, ...restProps }) => {\n  const { innerWidth, innerHeight } = useWindowSize()\n\n  return <StarField\n    {...restProps}\n    style={{ ...fixedPositionStyle, ...style }}\n    width={innerWidth}\n    height={innerHeight}\n  />\n}\n","const SEED_CHARS = '0123456789ABCDEF'\n\nexport function randomColor(): string {\n  const color = Array\n    .apply(null, new Array(6))\n    .map(() => SEED_CHARS[Math.floor(Math.random() * 16)])\n    .join('')\n\n  return `#${color}`\n}\n"],"names":["createStarsState","options","width","height","x","Math","round","y","z","stars","createStars","count","starPool","i","push","random","stepX","stepY","useStarField","canvasRef","stateReference","initialState","current","length","splice","useEffect","context","getContext","starLineWidthRatio","speed","starRatio","starSize","starStyle","strokeStyle","lineCap","starShape","fpsInterval","fps","animationFrameId","now","elapsed","then","Date","requestAnimationFrame","animateFrame","bgStyle","clear","noBackground","clearRect","fillStyle","fillRect","drawStarStep","star","currentX","currentY","beginPath","lineWidth","moveTo","lineTo","stroke","closePath","drawStarField","cancelAnimationFrame","StarField","restProps","useRef","React","ref","useWindowSize","windowSize","setWindowSize","useState","getWindowSize","handleResize","window","addEventListener","removeEventListener","innerHeight","innerWidth","outerHeight","outerWidth","fixedPositionStyle","position","zIndex","WindowSizeStarField","style","randomColor","Array","apply","map","floor","join"],"mappings":"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"}